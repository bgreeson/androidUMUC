package testharness;

import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

public class TestHarnessUI extends javax.swing.JFrame
{
    //Create a database tool object and a storage tool object    
    private DatabaseTool userTool = new DatabaseTool();
    private StorageTool fileTool = new StorageTool();
    
    //Set defaults for each of the text fields
    private String defaultUserIDTxt = "User ID...";
    private String defaultTrgtIDTxt = "New / Target User ID...";
    private String defaultMailIDTxt = "eMail Address...";
    private String defaultPasswdTxt = "Password...";
    private String defaultMesgIDTxt = "File Name or Message ID...";

    /**
     * Creates new form TestHarnessUI
     */
    public TestHarnessUI()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents()
    {

        jFileChooser1 = new javax.swing.JFileChooser();
        Input = new javax.swing.JPanel();
        txtField_userID = new javax.swing.JTextField();
        txtField_trgtID = new javax.swing.JTextField();
        txtField_mailID = new javax.swing.JTextField();
        txtField_passwd = new javax.swing.JTextField();
        txtField_mesgID = new javax.swing.JTextField();
        databasePanel = new javax.swing.JPanel();
        dBaseBtn_regUser = new javax.swing.JButton();
        dBaseBtn_edtUser = new javax.swing.JButton();
        dBaseBtn_disUser = new javax.swing.JButton();
        dBaseBtn_delUser = new javax.swing.JButton();
        dBaseBtn_getUser = new javax.swing.JButton();
        dBaseBtn_addCont = new javax.swing.JButton();
        dBaseBtn_delCont = new javax.swing.JButton();
        storagePanel = new javax.swing.JPanel();
        storBtn_upload = new javax.swing.JButton();
        storBtn_delete = new javax.swing.JButton();
        storBtn_msgInfo = new javax.swing.JButton();
        storBtn_msgCnt = new javax.swing.JButton();
        storBtn_rxMsgs = new javax.swing.JButton();
        storBtn_txMsgs = new javax.swing.JButton();
        Output = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        Input.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SoundWave Test Harness v1.1", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Arial", 0, 18))); // NOI18N
        Input.setName("Input"); // NOI18N

        txtField_userID.setForeground(new java.awt.Color(192, 192, 192));
        txtField_userID.setText(defaultUserIDTxt);
        txtField_userID.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtField_userID.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                txtField_userIDFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                txtField_userIDFocusLost(evt);
            }
        });

        txtField_trgtID.setForeground(new java.awt.Color(192, 192, 192));
        txtField_trgtID.setText(defaultTrgtIDTxt);
        txtField_trgtID.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtField_trgtID.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                txtField_trgtIDFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                txtField_trgtIDFocusLost(evt);
            }
        });

        txtField_mailID.setForeground(new java.awt.Color(192, 192, 192));
        txtField_mailID.setText(defaultMailIDTxt);
        txtField_mailID.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtField_mailID.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                txtField_mailIDMouseClicked(evt);
            }
        });
        txtField_mailID.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                txtField_mailIDFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                txtField_mailIDFocusLost(evt);
            }
        });

        txtField_passwd.setForeground(new java.awt.Color(192, 192, 192));
        txtField_passwd.setText(defaultPasswdTxt);
        txtField_passwd.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtField_passwd.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                txtField_passwdFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                txtField_passwdFocusLost(evt);
            }
        });

        txtField_mesgID.setForeground(new java.awt.Color(192, 192, 192));
        txtField_mesgID.setText(defaultMesgIDTxt);
        txtField_mesgID.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtField_mesgID.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                txtField_mesgIDFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                txtField_mesgIDFocusLost(evt);
            }
        });

        databasePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DATABASE CONTROLS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        dBaseBtn_regUser.setText("REGISTER USER");
        dBaseBtn_regUser.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                dBaseBtn_regUserMouseClicked(evt);
            }
        });

        dBaseBtn_edtUser.setText("EDIT USER");
        dBaseBtn_edtUser.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                dBaseBtn_edtUserMouseClicked(evt);
            }
        });

        dBaseBtn_disUser.setText("DISABLE USER");
        dBaseBtn_disUser.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                dBaseBtn_disUserMouseClicked(evt);
            }
        });

        dBaseBtn_delUser.setText("DELETE USER");
        dBaseBtn_delUser.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                dBaseBtn_delUserMouseClicked(evt);
            }
        });

        dBaseBtn_getUser.setText("GET USER INFO");
        dBaseBtn_getUser.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                dBaseBtn_getUserMouseClicked(evt);
            }
        });

        dBaseBtn_addCont.setText("ADD CONTACT");
        dBaseBtn_addCont.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                dBaseBtn_addContMouseClicked(evt);
            }
        });

        dBaseBtn_delCont.setText("DEL CONTACT");
        dBaseBtn_delCont.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                dBaseBtn_delContMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout databasePanelLayout = new javax.swing.GroupLayout(databasePanel);
        databasePanel.setLayout(databasePanelLayout);
        databasePanelLayout.setHorizontalGroup(
            databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databasePanelLayout.createSequentialGroup()
                .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(dBaseBtn_delUser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dBaseBtn_disUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dBaseBtn_regUser, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(dBaseBtn_edtUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dBaseBtn_getUser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(dBaseBtn_delCont, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dBaseBtn_addCont, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        databasePanelLayout.setVerticalGroup(
            databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databasePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dBaseBtn_regUser)
                    .addComponent(dBaseBtn_getUser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dBaseBtn_edtUser)
                    .addComponent(dBaseBtn_addCont))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dBaseBtn_disUser)
                    .addComponent(dBaseBtn_delCont))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dBaseBtn_delUser))
        );

        storagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "STORAGE CONTROLS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        storBtn_upload.setText("UPLOAD MESSAGE");
        storBtn_upload.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                storBtn_uploadMouseClicked(evt);
            }
        });

        storBtn_delete.setText("DELETE MESSAGE");
        storBtn_delete.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                storBtn_deleteMouseClicked(evt);
            }
        });

        storBtn_msgInfo.setText("MESSAGE INFO");
        storBtn_msgInfo.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                storBtn_msgInfoMouseClicked(evt);
            }
        });

        storBtn_msgCnt.setText("MESSAGE COUNT");
        storBtn_msgCnt.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                storBtn_msgCntMouseClicked(evt);
            }
        });

        storBtn_rxMsgs.setText("RX MESSAGE LIST");
        storBtn_rxMsgs.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                storBtn_rxMsgsMouseClicked(evt);
            }
        });
        storBtn_rxMsgs.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                storBtn_rxMsgsActionPerformed(evt);
            }
        });

        storBtn_txMsgs.setText("TX MESSAGE LIST");
        storBtn_txMsgs.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                storBtn_txMsgsMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout storagePanelLayout = new javax.swing.GroupLayout(storagePanel);
        storagePanel.setLayout(storagePanelLayout);
        storagePanelLayout.setHorizontalGroup(
            storagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(storagePanelLayout.createSequentialGroup()
                .addGroup(storagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(storBtn_upload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(storBtn_delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(storBtn_msgCnt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(storBtn_msgInfo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(storagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(storBtn_rxMsgs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(storBtn_txMsgs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        storagePanelLayout.setVerticalGroup(
            storagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(storagePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(storagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(storBtn_upload)
                    .addComponent(storBtn_rxMsgs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(storagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(storBtn_delete)
                    .addComponent(storBtn_txMsgs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(storBtn_msgInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(storBtn_msgCnt))
        );

        javax.swing.GroupLayout InputLayout = new javax.swing.GroupLayout(Input);
        Input.setLayout(InputLayout);
        InputLayout.setHorizontalGroup(
            InputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtField_userID)
            .addComponent(txtField_trgtID)
            .addComponent(txtField_mailID)
            .addComponent(txtField_passwd)
            .addComponent(txtField_mesgID)
            .addGroup(InputLayout.createSequentialGroup()
                .addComponent(databasePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(storagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        InputLayout.setVerticalGroup(
            InputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InputLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtField_userID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtField_trgtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtField_mailID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtField_passwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtField_mesgID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(InputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(databasePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(storagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Output.setName("Output"); // NOI18N

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout OutputLayout = new javax.swing.GroupLayout(Output);
        Output.setLayout(OutputLayout);
        OutputLayout.setHorizontalGroup(
            OutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(OutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(OutputLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        OutputLayout.setVerticalGroup(
            OutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 222, Short.MAX_VALUE)
            .addGroup(OutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(OutputLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Input, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Output, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Output, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void storBtn_uploadMouseClicked(java.awt.event.MouseEvent evt)                                            
    {                                                
        //FileNameExtensionFilter filter = new FileNameExtensionFilter("Text files", "txt");
        //jFileChooser1.setFileFilter(filter);
        int returnVal = jFileChooser1.showOpenDialog(Input);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            //String fileName = jFileChooser1.getSelectedFile().getName();
            String filePath = jFileChooser1.getSelectedFile().getPath();
            String fileName = jFileChooser1.getSelectedFile().getName();
            jTextArea1.setText("Uploading File: " + fileName + "\n");
            jTextArea1.append("Path: " + filePath + "\n\n");
            
            StorageTool fileTool = new StorageTool();
            String response = fileTool.uploadFile(filePath);
            
            jTextArea1.append("Server response: " + response);            
            
            /*
            if (success == 200)
            {
                jTextArea1.append("\n" + fileName + " uploaded successfully!");
            }
            else jTextArea1.append("\n" + fileName + " upload FAILED!");
            */
        }        
    }                                           

    private void txtField_mailIDMouseClicked(java.awt.event.MouseEvent evt)                                             
    {                                                 
        txtField_mailID.setText("");
        txtField_mailID.setForeground(Color.BLACK);
    }                                            

    private void storBtn_deleteMouseClicked(java.awt.event.MouseEvent evt)                                            
    {                                                
        String fileName = txtField_mesgID.getText();
        
        if (fileName.isEmpty() || fileName.equals(defaultMesgIDTxt))
        {
            //jTextArea1.setText("No file name given.  Please enter a file name and try your search again.");
        }
        else
        {            
            //jTextArea1.setText("Searching for " + fileName + "...\n\n");
            //Start search....       
        }
    }                                           

    private void storBtn_msgCntMouseClicked(java.awt.event.MouseEvent evt)                                            
    {                                                
        // TODO add your handling code here:
        String fileName = txtField_mesgID.getText();
        
        if (fileName.isEmpty() || fileName.equals(defaultMesgIDTxt))
        {
            //jTextArea1.setText("No file name given.  Please enter a file name and try again.");
        }
        else
        {
            //jTextArea1.setText("Deleting " + fileName + "...\n\n");
            //Start storage file delete...            
        }
    }                                           

    private void storBtn_rxMsgsMouseClicked(java.awt.event.MouseEvent evt)                                            
    {                                                
        // List the contents of the bucket.
        //jTextArea1.setText("Retrieving contents of storage...\n\n");
        //Get contents of storage...    
            
    }                                           

    private void storBtn_txMsgsMouseClicked(java.awt.event.MouseEvent evt)                                            
    {                                                
        // TODO add your handling code here:
        //jTextArea1.setText("Retrieving storage metadata information...\n\n");
        //Get metadata of storage...   
    }                                           

    private void dBaseBtn_regUserMouseClicked(java.awt.event.MouseEvent evt)                                              
    {                                                  
        // TODO add your handling code here:
        String userName = txtField_userID.getText();
        String mailAddr = txtField_mailID.getText();
        String password = txtField_passwd.getText();
        
        if (userName.isEmpty() || userName.equals(defaultUserIDTxt) ||
                mailAddr.isEmpty() || mailAddr.equals(defaultMailIDTxt) ||
                password.isEmpty() || password.equals(defaultPasswdTxt))
        {
            jTextArea1.setText("Please enter a User ID, eMail Address and Password and try again.");
        }
        else
        {            
            jTextArea1.setText("Registering user " + userName + "...\n\n");
            String response = userTool.createUser(userName, mailAddr, password);
            
            jTextArea1.append("Server response: " + response);                   
        }
    }                                             

    private void txtField_mesgIDFocusGained(java.awt.event.FocusEvent evt)                                            
    {                                                
        // TODO add your handling code here:
        txtField_mesgID.setText("");
        txtField_mesgID.setForeground(Color.BLACK);
    }                                           

    private void txtField_mesgIDFocusLost(java.awt.event.FocusEvent evt)                                          
    {                                              
        // TODO add your handling code here:
        if (txtField_mesgID.getText().isEmpty())
        {
            txtField_mesgID.setForeground(Color.LIGHT_GRAY);
            txtField_mesgID.setText(defaultMesgIDTxt);
        }
    }                                         

    private void txtField_mailIDFocusGained(java.awt.event.FocusEvent evt)                                            
    {                                                
        // TODO add your handling code here:
        txtField_mailID.setText("");
        txtField_mailID.setForeground(Color.BLACK);
    }                                           

    private void txtField_mailIDFocusLost(java.awt.event.FocusEvent evt)                                          
    {                                              
        // TODO add your handling code here:
        if (txtField_mailID.getText().isEmpty())
        {
            txtField_mailID.setForeground(Color.LIGHT_GRAY);
            txtField_mailID.setText(defaultMailIDTxt);
        }
    }                                         

    private void txtField_passwdFocusGained(java.awt.event.FocusEvent evt)                                            
    {                                                
        // TODO add your handling code here:
        txtField_passwd.setText("");
        txtField_passwd.setForeground(Color.BLACK);
    }                                           

    private void txtField_passwdFocusLost(java.awt.event.FocusEvent evt)                                          
    {                                              
        // TODO add your handling code here:
        if (txtField_passwd.getText().isEmpty())
        {
            txtField_passwd.setForeground(Color.LIGHT_GRAY);
            txtField_passwd.setText(defaultPasswdTxt);
        }
    }                                         

    private void storBtn_msgInfoMouseClicked(java.awt.event.MouseEvent evt)                                             
    {                                                 
        // TODO add your handling code here:
    }                                            

    private void dBaseBtn_edtUserMouseClicked(java.awt.event.MouseEvent evt)                                              
    {                                                  
        // TODO add your handling code here:
        String userName = txtField_userID.getText();
        String newName = txtField_trgtID.getText();
        String newMail = txtField_mailID.getText();
        String newPass = txtField_passwd.getText();
        
        if ((userName.isEmpty() || userName.equals(defaultUserIDTxt)) && (
                (newName.isEmpty() || newName.equals(defaultTrgtIDTxt)) ||
                (newMail.isEmpty() || newMail.equals(defaultMailIDTxt)) ||
                (newPass.isEmpty() || newPass.equals(defaultPasswdTxt))))
        {
            jTextArea1.setText("Please enter a User ID and a new User ID, eMail Address and/or Password and try again.");
        }
        else
        {            
            jTextArea1.setText("Editing user " + userName + "...\n\n");
            if (newName.equals(defaultTrgtIDTxt)) newName = "";
            if (newMail.equals(defaultMailIDTxt)) newMail = "";
            if (newPass.equals(defaultPasswdTxt)) newPass = "";
            String response = userTool.editUser(userName, newName, newMail, newPass);
            
            jTextArea1.append("Server response: " + response);                   
        }
    }                                             

    private void dBaseBtn_disUserMouseClicked(java.awt.event.MouseEvent evt)                                              
    {                                                  
        // TODO add your handling code here:
        String userName = txtField_userID.getText();
        
        if (userName.isEmpty() || userName.equals(defaultUserIDTxt))
        {
            jTextArea1.setText("Please enter a User ID and try again.");
        }
        else
        {            
            jTextArea1.setText("Disabling user " + userName + "...\n\n");
            String response = userTool.disableUser(userName);
            
            jTextArea1.append("Server response: " + response);                   
        }
    }                                             

    private void dBaseBtn_delUserMouseClicked(java.awt.event.MouseEvent evt)                                              
    {                                                  
        // TODO add your handling code here:
        String userName = txtField_userID.getText();
        
        if (userName.isEmpty() || userName.equals(defaultUserIDTxt))
        {
            jTextArea1.setText("Please enter a User ID and try again.");
        }
        else
        {            
            jTextArea1.setText("Deleting user " + userName + "...\n\n");
            String response = userTool.deleteUser(userName);
            
            jTextArea1.append("Server response: " + response);                   
        }
    }                                             

    private void dBaseBtn_addContMouseClicked(java.awt.event.MouseEvent evt)                                              
    {                                                  
        // TODO add your handling code here:
        String userName = txtField_userID.getText();
        String memberName = txtField_trgtID.getText();
        
        if ((userName.isEmpty() || userName.equals(defaultUserIDTxt)) && (
                (memberName.isEmpty() || memberName.equals(defaultTrgtIDTxt))))
        {
            jTextArea1.setText("Please enter a User ID and a Member User ID and try again.");
        }
        else
        {            
            jTextArea1.setText("Creating contact " + memberName + " for " + userName + "...\n\n");
            String response = userTool.createContact(userName, memberName);
            
            jTextArea1.append("Server response: " + response);                   
        }
    }                                             

    private void dBaseBtn_getUserMouseClicked(java.awt.event.MouseEvent evt)                                              
    {                                                  
        // TODO add your handling code here:
        String userName = txtField_userID.getText();
        
        if (userName.isEmpty() || userName.equals(defaultUserIDTxt))
        {
            jTextArea1.setText("Please enter a User ID and try again.");
        }
        else
        {            
            jTextArea1.setText("Getting user " + userName + "...\n\n");
            String response = userTool.getUserInfo(userName);
            
            jTextArea1.append("Server response: " + response);                   
        }
    }                                             

    private void dBaseBtn_delContMouseClicked(java.awt.event.MouseEvent evt)                                              
    {                                                  
        // TODO add your handling code here:
        String userName = txtField_userID.getText();
        String contactName = txtField_trgtID.getText();
        
        if ((userName.isEmpty() || userName.equals(defaultUserIDTxt)) && (
                (contactName.isEmpty() || contactName.equals(defaultTrgtIDTxt))))
        {
            jTextArea1.setText("Please enter a User ID and a Contact User ID and try again.");
        }
        else
        {            
            jTextArea1.setText("Deleting contact " + contactName + " for " + userName + "...\n\n");
            String response = userTool.createContact(userName, contactName);
            
            jTextArea1.append("Server response: " + response);                   
        }
    }                                             

    private void storBtn_rxMsgsActionPerformed(java.awt.event.ActionEvent evt)                                               
    {                                                   
        // TODO add your handling code here:
    }                                              

    private void txtField_userIDFocusGained(java.awt.event.FocusEvent evt)                                            
    {                                                
        // TODO add your handling code here:
        txtField_userID.setText("");
        txtField_userID.setForeground(Color.BLACK);
    }                                           

    private void txtField_userIDFocusLost(java.awt.event.FocusEvent evt)                                          
    {                                              
        // TODO add your handling code here:
        if (txtField_userID.getText().isEmpty())
        {
            txtField_userID.setForeground(Color.LIGHT_GRAY);
            txtField_userID.setText(defaultUserIDTxt);
        }
    }                                         

    private void txtField_trgtIDFocusGained(java.awt.event.FocusEvent evt)                                            
    {                                                
        // TODO add your handling code here:
        txtField_trgtID.setText("");
        txtField_trgtID.setForeground(Color.BLACK);
    }                                           

    private void txtField_trgtIDFocusLost(java.awt.event.FocusEvent evt)                                          
    {                                              
        // TODO add your handling code here:
        if (txtField_trgtID.getText().isEmpty())
        {
            txtField_trgtID.setForeground(Color.LIGHT_GRAY);
            txtField_trgtID.setText(defaultTrgtIDTxt);
        }
    }                                         

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(TestHarnessUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(TestHarnessUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(TestHarnessUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(TestHarnessUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new TestHarnessUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JPanel Input;
    private javax.swing.JPanel Output;
    private javax.swing.JButton dBaseBtn_addCont;
    private javax.swing.JButton dBaseBtn_delCont;
    private javax.swing.JButton dBaseBtn_delUser;
    private javax.swing.JButton dBaseBtn_disUser;
    private javax.swing.JButton dBaseBtn_edtUser;
    private javax.swing.JButton dBaseBtn_getUser;
    private javax.swing.JButton dBaseBtn_regUser;
    private javax.swing.JPanel databasePanel;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton storBtn_delete;
    private javax.swing.JButton storBtn_msgCnt;
    private javax.swing.JButton storBtn_msgInfo;
    private javax.swing.JButton storBtn_rxMsgs;
    private javax.swing.JButton storBtn_txMsgs;
    private javax.swing.JButton storBtn_upload;
    private javax.swing.JPanel storagePanel;
    private javax.swing.JTextField txtField_mailID;
    private javax.swing.JTextField txtField_mesgID;
    private javax.swing.JTextField txtField_passwd;
    private javax.swing.JTextField txtField_trgtID;
    private javax.swing.JTextField txtField_userID;
    // End of variables declaration                   
}
